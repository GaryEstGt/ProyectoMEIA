/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectomeia;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author garya
 */
public class LogIn extends javax.swing.JFrame {

    /**
     * Creates new form LogIn
     */    
    public LogIn() throws IOException {
        initComponents();                
        ProyectoMEIA.usuarioEnUso = null;
        File usuario, usuarioMaestro, descriptorBitacora, descriptorMaestro,lista,listaMaestro,descBit,descListaM, usuarioLista, indice, 
                descUsuarioLista, descIndice, arbol, descArbol;
        
        usuario = new File("C:/MEIA/bitacora_usuario.txt");
        usuarioMaestro = new File("C:/MEIA/usuario.txt");
        descriptorBitacora = new File("C:/MEIA/desc_usuariobitacora.txt");
        descriptorMaestro = new File("C:/MEIA/desc_usuario.txt");
        lista = new File("C:/MEIA/bitacora_lista.txt");
        listaMaestro = new File("C:/MEIA/lista.txt");
        descBit = new File("C:/MEIA/desc_listabitacora.txt");
        descListaM = new File("C:/MEIA/desc_lista.txt");
        usuarioLista = new File("C:/MEIA/Lista_usuario.txt");
        descUsuarioLista = new File("C:/MEIA/desc_usuarioLista.txt");
        indice = new File("C:/MEIA/indice_Lista_usuario.txt");
        descIndice = new File("C:/MEIA/desc_indice.txt");
        arbol = new File("C:/MEIA/correos.txt");
        descArbol = new File("C:/MEIA/desc_correos.txt");
        
        if(!usuario.exists())usuario.createNewFile(); 
        if(!lista.exists())lista.createNewFile(); 
        if(!usuarioMaestro.exists())usuarioMaestro.createNewFile();  
        if(!listaMaestro.exists())listaMaestro.createNewFile(); 
        if(!usuarioLista.exists())usuarioLista.createNewFile();
        if(!indice.exists())indice.createNewFile();
        if(!arbol.exists())arbol.createNewFile();
        
        if(!descriptorBitacora.exists()){
            descriptorBitacora.createNewFile();
            DescriptorUsuario desc = new DescriptorUsuario("bitacora_usuario.txt"," "," "," "," ",0,0,0,10);
            Escritor.Escribir("C:/MEIA/desc_usuariobitacora.txt", desc.toString());
        }
        
        if(!descriptorMaestro.exists()){
            descriptorMaestro.createNewFile();
            DescriptorUsuario desc = new DescriptorUsuario("usuario.txt"," "," "," "," ",0,0,0,5);
            Escritor.Escribir("C:/MEIA/desc_usuario.txt", desc.toString());
        }
          if(!descBit.exists()){
            descBit.createNewFile();
            DescriptorLista desc = new DescriptorLista("bitacora_lista.txt"," "," "," "," ",0,0,0,10);
            Escritor.Escribir("C:/MEIA/desc_listabitacora.txt", desc.toString());
        }
        
        if(!descListaM.exists()){
            descListaM.createNewFile();
            DescriptorLista desc = new DescriptorLista("lista.txt"," "," "," "," ",0,0,0,5);
            Escritor.Escribir("C:/MEIA/desc_lista.txt", desc.toString());
        }
        
        if(!descUsuarioLista.exists()){
            descUsuarioLista.createNewFile();
            DescriptorUsuarioLista desc = new DescriptorUsuarioLista(" "," ",0,0,0);
            Escritor.Escribir("C:/MEIA/desc_usuarioLista.txt", desc.toString());
        }
        
        if(!descIndice.exists()){
            descIndice.createNewFile();
            DescriptorIndice desc = new DescriptorIndice(0,0,0,0);
            Escritor.Escribir("C:/MEIA/desc_indice.txt", desc.toString());
        }
        
        if(!descArbol.exists()){
            descArbol.createNewFile();
            DescriptorCorreo desc = new DescriptorCorreo("correos.txt",0,0,0,0);
            Escritor.Escribir("C:/MEIA/desc_correos.txt", desc.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_Titulo = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtContraseña = new javax.swing.JPasswordField();
        btnIngresar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        label_Titulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_Titulo.setText("Inicio de Sesión");

        jLabel1.setText("Usuario");

        jLabel2.setText("Contraseña");

        btnIngresar.setText("Ingresar");
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        jLabel3.setText("¿No estas registrado?");

        btnRegistrar.setText("Registrarse");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\garya\\Documents\\Gary URL\\Cuarto Ciclo 2018\\Manejo e implementación de archivos\\logo pequeño.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jLabel5)
                .addGap(98, 98, 98)
                .addComponent(jLabel4)
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRegistrar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtUsuario)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btnIngresar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(btnSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(label_Titulo)))
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(label_Titulo)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIngresar)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnRegistrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        // TODO add your handling code here:
        if(!txtUsuario.getText().isEmpty()){
            if(!txtContraseña.getText().isEmpty()){
                LinkedList<Usuario> lista2 = OperacionesSecuencial.obtenerUsuarios(1);
                LinkedList<Usuario> lista = OperacionesSecuencial.obtenerUsuarios(2);
                
                if(lista2 != null && lista != null){
                    for (int i = 0; i < lista2.size(); i++) {
                        lista.add(lista2.get(i));
                    }
                }                                
                
                if(lista != null){
                    for (int i = 0; i < lista.size(); i++) {
                        if(lista.get(i).getUsuario().equals(txtUsuario.getText()) && lista.get(i).getContraseña().equals(OperacionesSecuencial.getMD5(txtContraseña.getText())) && lista.get(i).getEstatus() != 0){
                            JOptionPane.showMessageDialog(null,lista.get(i).getUsuario() + (lista.get(i).getRol() == 1 ? "Administrador" : "Usuario") + lista.get(i).getPathFoto());
                            ProyectoMEIA.usuarioEnUso = lista.get(i);
                        }
                    }                    
                } 
                if(lista2!=null){
                     for (int i = 0; i < lista2.size(); i++) {
                        if(lista2.get(i).getUsuario().equals(txtUsuario.getText()) && lista2.get(i).getContraseña().equals(OperacionesSecuencial.getMD5(txtContraseña.getText())) && lista2.get(i).getEstatus() != 0){
                            JOptionPane.showMessageDialog(null,lista2.get(i).getUsuario() + (lista2.get(i).getRol() == 1 ? "Administrador" : "Usuario") + lista2.get(i).getPathFoto());
                            ProyectoMEIA.usuarioEnUso = lista2.get(i);
                        }
                    } 
                }
                                
                if(ProyectoMEIA.usuarioEnUso == null && lista == null){
                    JOptionPane.showMessageDialog(null,"No existen usuarios en el sistema, debe registrarse");
                }                
                else if(ProyectoMEIA.usuarioEnUso == null){
                    JOptionPane.showMessageDialog(null,"El nombre de usuario y contraseña que ingreso son incorrectos");
                }
                else{
                    if(ProyectoMEIA.usuarioEnUso.getRol()==1){
                        // TODO add your handling code here:
                        OpcionesAdministrador registro = new OpcionesAdministrador();
                        registro.setVisible(true);
                        this.setVisible(false);
                    }
                    else{
                        OpcionesUsuario registro = new OpcionesUsuario();
                        registro.setVisible(true);
                        this.setVisible(false);
                    }                     
                }
            }
            else{
                JOptionPane.showMessageDialog(null,"Debe ingresar la contraseña");
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Debe ingresar el usuario");
        }
        
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        try {
            // TODO add your handling code here:
            RegistroUsuario registro = new RegistroUsuario(true);
            registro.setVisible(true);
            this.setVisible(false);
        } catch (ParseException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        DescriptorUsuario descBitacora=OperacionesSecuencial.obtenerDescriptorUsuario(2);
        DescriptorLista descBitacoraLista=SecuencialLista.obtenerDescriptorLista(2);
        DescriptorLista descMaestroLista = SecuencialLista.obtenerDescriptorLista(1);
        DescriptorIndice descIndice = Lista_Usuario.obtenerDescriptorIndice();
        DescriptorUsuarioLista descUsuarioLista = Lista_Usuario.obtenerDescriptorUsuarioLista();
        
        if(descBitacora.getNumRegistros()!=0){
            try {
                OperacionesSecuencial.LlenarUsuariosMaestro();
            } catch (IOException ex) {
                Logger.getLogger(BuscarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
          //if(descBitacoraLista.getNumRegistros()!=0){
            try {
               SecuencialLista.LlenarListasMaestro();
               
               LinkedList<Lista> listas = SecuencialLista.obtenerListas(2);
               
                for (int i = 0; i < listas.size(); i++) {
                    if(listas.get(i).getEstatus() == 0){
                        listas.remove(i);
                        i = i-1;
                    }
                }
                
                descMaestroLista.setNumRegistros(listas.size());
                descMaestroLista.setRegistrosActivos(listas.size());
                descMaestroLista.setRegistrosInactivos(0);
                
                SecuencialLista.rellenarDescriptorLista(descMaestroLista, 1);
                SecuencialLista.rellenarListasMaestro(listas);
            } catch (IOException ex) {
                Logger.getLogger(BuscarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        //}
          LinkedList<CambioSiguiente> numeros=new LinkedList<>();
          int antes=0,despues=0;
        if(descIndice.getNumRegistros() != 0){
            LinkedList<Indice> listaIndice = Lista_Usuario.obtenerIndiceListasUsuario();
            for (int i = 0; i < listaIndice.size(); i++) {
                if(listaIndice.get(i).getEstatus()!=0){
                    numeros.add(new CambioSiguiente(listaIndice.get(i).getNumeroRegistro(),0));
                }
            }
            for (int i = 0; i < listaIndice.size(); i++) {
                
                
                if(listaIndice.get(i).getEstatus() == 0){
                    if(i != listaIndice.size() - 1){
                        for (int j = i + 1; j < listaIndice.size(); j++) {
                            int posicion = Integer.parseInt(listaIndice.get(j).getPosicion().split("\\.")[1]);
                            listaIndice.get(j).setPosicion("1." + (posicion - 1));
                            listaIndice.get(j).setNumeroRegistro(listaIndice.get(j).getNumeroRegistro() - 1);
                        }
                    }
                    listaIndice.remove(i);
                    i = i-1;
                }
            }
            for (int i = 0; i < numeros.size(); i++) {
                numeros.get(i).setNumNuevo(listaIndice.get(i).getNumeroRegistro());
            }
                  for (int x = 0; x < numeros.size(); x++) {
                        for (int j = 0; j < listaIndice.size(); j++) {
                            if(listaIndice.get(j).getSiguiente()==numeros.get(x).getNumAnterior()){
                                listaIndice.get(j).setSiguiente(numeros.get(x).getNumNuevo());
                            }
                        }
                    }
            
            descIndice.setNumRegistros(listaIndice.size());
            descIndice.setRegistrosActivos(listaIndice.size());
            descIndice.setRegistrosInactivos(0);
            
            Lista_Usuario.rellenarDescriptorIndice(descIndice);
            Lista_Usuario.rellenarIndiceListasUsuario(listaIndice);
        }
        
        if(descUsuarioLista.getNumRegistros() != 0){
            LinkedList<UsuarioLista> listaUsuarioLista = Lista_Usuario.obtenerListasUsuario();
            for (int i = 0; i < listaUsuarioLista.size(); i++) {
                if(listaUsuarioLista.get(i).getEstatus() == 0){                    
                    listaUsuarioLista.remove(i);
                    i = i-1;
                }
            }
            
            descUsuarioLista.setNumRegistros(listaUsuarioLista.size());
            descUsuarioLista.setRegistrosActivos(listaUsuarioLista.size());
            descUsuarioLista.setRegistrosInactivos(0);
            
            Lista_Usuario.rellenarDescriptorUsuarioLista(descUsuarioLista);
            Lista_Usuario.rellenarListasUsuario(listaUsuarioLista);
        }
        
        System.exit(0); 
        setDefaultCloseOperation(LogIn.EXIT_ON_CLOSE);
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new LogIn().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIngresar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel label_Titulo;
    private javax.swing.JPasswordField txtContraseña;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
